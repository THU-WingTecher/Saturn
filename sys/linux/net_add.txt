type can_frame_t[DATA_SIZE] {
	can_id	canid_t
	len	int8[0:DATA_SIZE]
	flags	flags[can_frame_flags, int8]
	__res0	const[0, int8]
	__res1	const[0, int8]
	data	array[int8, DATA_SIZE]
}

type can_frame can_frame_t[CAN_MAX_DLEN]
type canfd_frame can_frame_t[CANFD_MAX_DLEN]

canid_t {
	id	int32:29[0:4]
	err	int32:1
	rtr	int32:1
	eff	int32:1
}

can_frame_flags = CANFD_BRS, CANFD_ESI

####

include <net/tcp.h>
include <net/mptcp.h>
include <net/mptcp_v4.h>
include <net/mptcp_v6.h>
include <uapi/linux/tcp.h>

tcp_mptcp_option [
	generic		mptcp_generic_option
	syn		mptcp_syn_option
	synack		mptcp_synack_option
	ack		mptcp_ack_option
	capable		mptcp_capable_option
	add_addr	mptcp_add_addr_option
	mp_join		mptcp_mp_join_option
	mp_fclose	mptcp_mp_fclose_option
	remove_addr	mptcp_remove_addr_option
] [varlen]

mptcp_sub_types = OPTION_TYPE_SYN, OPTION_TYPE_SYNACK, OPTION_TYPE_ACK, OPTION_MP_CAPABLE, OPTION_ADD_ADDR, OPTION_MP_JOIN, OPTION_MP_FCLOSE

# TODO: OPTION_REMOVE_ADDR was listed in mptcp_sub_types, but it does not fit into int8 below...
_ = OPTION_REMOVE_ADDR

mptcp_generic_option {
	type	flags[mptcp_sub_types, int8]
	length	len[parent, int8]
	data	array[int8, 0:16]
} [packed]

mptcp_capable_option {
	type		const[TCPOPT_MPTCP, int8]
	length		len[parent, int8]
	version		int8:4
	subtype		const[OPTION_MP_CAPABLE, int8:4]
	flags		int8
	sender		int64be
	receiver	array[int64be, 0:1]
} [packed]

mptcp_add_addr_option {
	type	const[TCPOPT_MPTCP, int8]
	length	len[parent, int8]
# TODO: this was OPTION_ADD_ADDR, but it does not fit into 4 bits.
	subtype	const[0, int8:4]
	version	len[parent, int8:4]
	addr_id	int8
	address	ipv4_addr
	port	int16be
	mac	array[int8, 0:8]
} [packed]

_ = OPTION_ADD_ADDR

mptcp_mp_join_option {
	type	const[TCPOPT_MPTCP, int8]
	length	len[parent, int8]
	flags	int8:4
# TODO: this was OPTION_MP_JOIN, but it does not fit into 4 bits.
	subtype	const[0, int8:4]
} [packed]

_ = OPTION_MP_JOIN

mptcp_syn_option {
	type	const[TCPOPT_MPTCP, int8]
	length	len[parent, int8]
	flags	int8:4
	subtype	const[OPTION_TYPE_SYN, int8:4]
	addr_id	int8
	token	int32
	nonce	int32
} [packed]

mptcp_synack_option {
	type	const[TCPOPT_MPTCP, int8]
	length	len[parent, int8]
	flags	int8:4
	subtype	const[OPTION_TYPE_SYNACK, int8:4]
	addr_id	int8
	mac	int64
	nonce	int32
} [packed]

mptcp_ack_option {
	type		const[TCPOPT_MPTCP, int8]
	length		len[parent, int8]
	reserved	int16:12
	subtype		const[OPTION_TYPE_ACK, int16:4]
	mac		array[int8, 0:20]
} [packed]

mptcp_mp_fclose_option {
	type		const[TCPOPT_MPTCP, int8]
	length		len[parent, int8]
	reserved	int16:12
# TODO: this was OPTION_MP_FCLOSE, but it does not fit into 4 bits.
	subtype		const[0, int16:4]
	key		int64
} [packed]

_ = OPTION_MP_FCLOSE

mptcp_remove_addr_option {
	type		const[TCPOPT_MPTCP, int8]
	length		len[parent, int8]
	reserved	int8:4
# TODO: this was OPTION_REMOVE_ADDR, but it does not fit into 4 bits.
	subtype		const[0, int8:4]
	addrs_id	array[int8]
} [packed]

_ = OPTION_REMOVE_ADDR

####
wg_packet [
	initiation	message_handshake_initiation
	response	message_handshake_response
	cookie		message_handshake_cookie
	data		message_data
] [varlen]

message_handshake_initiation {
	type			const[MESSAGE_HANDSHAKE_INITIATION, int32]
# Not clear if these indexes are also generated randomly and we need to guess them or not.
	sender_index		int32[0:4]
	unencrypted_ephemeral	array[int8, NOISE_PUBLIC_KEY_LEN]
	encrypted_static	array[int8, NOISE_PUBLIC_KEY_ENCRYPTED_LEN]
	encrypted_timestamp	array[int8, NOISE_TIMESTAMP_ENCRYPTED_LEN]
	macs			message_macs
}

message_handshake_response {
	type			const[MESSAGE_HANDSHAKE_RESPONSE, int32]
	sender_index		int32[0:4]
	receiver_index		int32[0:4]
	unencrypted_ephemeral	array[int8, NOISE_PUBLIC_KEY_LEN]
	encrypted_nothing	array[int8, NOISE_NOTHING_ENCRYPTED_LEN]
	macs			message_macs
}

message_handshake_cookie {
	type			const[MESSAGE_HANDSHAKE_COOKIE, int32]
	receiver_index		int32[0:4]
	nonce			array[int8, COOKIE_NONCE_LEN]
	encrypted_cookie	array[int8, NOISE_COOKIE_ENCRYPTED_LEN]
}

message_data {
	type		const[MESSAGE_DATA, int32]
# These are allocated randomly, so little chances guessing.
	key_idx		int32
# This is used as chacha20poly1305 decryption nonce.
	counter		int64
	encrypted_data	array[int8]
}

message_macs {
	mac1	array[int8, COOKIE_LEN]
	mac2	array[int8, COOKIE_LEN]
}

define NOISE_PUBLIC_KEY_ENCRYPTED_LEN	noise_encrypted_len(NOISE_PUBLIC_KEY_LEN)
define NOISE_TIMESTAMP_ENCRYPTED_LEN	noise_encrypted_len(NOISE_TIMESTAMP_LEN)
define NOISE_COOKIE_ENCRYPTED_LEN	noise_encrypted_len(COOKIE_LEN)
define NOISE_NOTHING_ENCRYPTED_LEN	noise_encrypted_len(0)

####

type pptp_call_id int16be[0:3]
